(()=>{async function e(e,t=null,n=null){let i;i=null!==t&&null!==n?await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${t}&lon=${n}&appid=32de6d105d017e55c7030daf2682885c`,{mode:"cors"}):await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=32de6d105d017e55c7030daf2682885c`,{mode:"cors"});const r=await i.json();if(console.log(r),i.ok){const e=function(e){let t={};return t.coord=e.coord,t.temp=e.main.temp,t.feels_like=e.main.feels_like,t.humidity=e.main.humidity,t.wind=e.wind.speed,t.countryCode=e.sys.country,t.city=e.name,t.logo=e.weather[0].icon,t.mainDescription=e.weather[0].main,t.detailDescription=e.weather[0].description,t.timezone=e.timezone,t}(r);console.log(e),function(e){document.querySelector(".logo img").src=`http://openweathermap.org/img/wn/${e.logo}@2x.png`,document.querySelector(".temp").textContent=parseInt(e.temp)-273+"℃",document.querySelector(".description").textContent=`${e.mainDescription} | ${e.detailDescription}`,document.querySelector(".feels-like-temp").textContent=`Feels Like: ${parseInt(e.feels_like)-273}℃`,document.querySelector(".humidity").textContent=`Humidity: ${e.humidity}%`,document.querySelector(".wind").textContent=`Wind: ${e.wind} km/h`,document.querySelector(".city").textContent=`${e.city}, ${e.countryCode}`;const t=function(e){const t=(new Date).getTime(),o=new Date(t+1e3*e),n=new Date(o.toISOString().slice(0,-1));return[n.toDateString(),n.toLocaleTimeString()]}(e.timezone);console.log(t),document.querySelector(".date-and-time").textContent=`${t[0]}, ${t[1]}`,o.setAttribute("id","hide2"),document.querySelectorAll("#hide").forEach((e=>{e.removeAttribute("id")}))}(e)}else document.querySelector(".errorMessage").removeAttribute("id"),o.setAttribute("id","hide2")}navigator.geolocation?navigator.geolocation.getCurrentPosition((function(t){e(null,t.coords.latitude,t.coords.longitude)})):alert("Geolocation is not supported by this browser.");const t=document.querySelector("form"),o=document.querySelector(".loading");o.removeAttribute("id"),t.onsubmit=t=>{t.preventDefault(),document.querySelector(".errorMessage").setAttribute("id","hideMessage"),e(document.querySelector("form input").value.trim()),o.removeAttribute("id")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,